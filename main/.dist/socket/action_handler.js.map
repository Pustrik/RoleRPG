{"version":3,"file":"action_handler.js","sourceRoot":"","sources":["../../socket/action_handler.ts"],"names":[],"mappings":";;;AAEA,yDAAoD;AAEpD,+DAA4G;AAE5G,SAAgB,cAAc,CAAC,MAAc;IACzC,OAAO,CAAC,IAAI,CAAC,wBAAwB,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;IAEnD,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,KAAK,EAAE,IAAa,EAAE,QAAsC,EAAE,EAAE;QACnF,OAAO,CAAC,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE1D,MAAM,WAAW,GAAG,MAAM,IAAA,+BAAc,GAAE,CAAC;QAE3C,IAAI,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;YACjC,OAAO,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;YAC1C,OAAO,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAC/C,QAAQ,CAAC,MAAM,IAAA,8BAAa,GAAE,CAAC,CAAC;YAChC,OAAO;SACV;QACD,MAAM,SAAS,GAAG,MAAM,2BAAY,CAAC,MAAM,CAAC,EAAC,SAAS,EAAE,MAAM,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAC,CAAC,CAAC;QACnI,MAAM,OAAO,GAAI,MAAM,IAAA,8BAAa,GAAE,CAAC;QACvC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACjC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAElB,gCAAgC;QAChC,0DAA0D;QAC1D,0CAA0C;QAC1C,oCAAoC;QACpC,mBAAmB;QACnB,KAAK;QACL,IAAA,4BAAW,EAAC,gBAAgB,EAAE,IAAA,qCAAoB,EAAC,OAAO,EAAE,MAAM,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;IACrF,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;QAC/B,OAAO,CAAC,IAAI,CAAC,4BAA4B,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;QAEvD,MAAM,IAAI,GAAG,2BAAY,CAAC,OAAO,CAAC,EAAC,SAAS,EAAE,MAAM,CAAC,EAAE,EAAC,CAAC,CAAC;QAC1D,IAAI,IAAI,EAAE;YACN,MAAM,SAAS,GAAG,MAAM,2BAAY,CAAC,SAAS,CAAC,EAAC,SAAS,EAAE,MAAM,CAAC,EAAE,EAAC,CAAC,CAAC;YACvE,IAAA,4BAAW,EAAC,mBAAmB,EAAE,MAAM,IAAA,+BAAc,GAAE,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;SACvE;IACL,CAAC,CAAC,CAAC;AACP,CAAC;AArCD,wCAqCC","sourcesContent":["import {Socket} from \"socket.io\";\nimport {IPlayer} from \"../client/src/store/store_socket\";\nimport {player_model} from \"../models/player_model\";\nimport {playersDto} from \"../dtos/player_dtos\";\nimport {getAllPlayers, getAllSocketID, getSocketsButCurrent, sendMessage} from \"../services/socket_service\";\n\nexport function startListeners(socket: Socket) {\n    console.info('Message received from ' + socket.id);\n\n    socket.on('handshake', async (user: IPlayer, callback: (players: IPlayer[]) => void) => {\n        console.info('Handshake received from: ' + user.username);\n\n        const reconnected = await getAllSocketID();\n\n        if (reconnected.includes(socket.id)) {\n            console.info('This user has reconnected');\n            console.info('Sending callback for reconnect');\n            callback(await getAllPlayers());\n            return;\n        }\n        const user_data = await player_model.create({socket_id: socket.id, username: user.username, hp: user.hp, statuses: user.statuses});\n        const players  = await getAllPlayers();\n        console.info('Sending callback');\n        callback(players);\n\n        // sendMessage('user_connected',\n        //     Object.values(Object.values(players).map((val) => {\n        //         if(val.socket_id !== socket.id)\n        //             return val.socket_id;\n        //     })), players\n        // );\n        sendMessage('user_connected', getSocketsButCurrent(players, socket.id), players);\n    });\n\n    socket.on('disconnect', async () => {\n        console.info('Disconnect received from: ' + socket.id);\n\n        const user = player_model.findOne({socket_id: socket.id});\n        if (user) {\n            const user_data = await player_model.deleteOne({socket_id: socket.id});\n            sendMessage('user_disconnected', await getAllSocketID(), socket.id);\n        }\n    });\n}\n\n"]}