{"version":3,"file":"user_service.js","sourceRoot":"","sources":["../../services/user_service.ts"],"names":[],"mappings":"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","sourcesContent":["import {user_model} from \"../models/user_model\";\nimport * as bcrypt from 'bcrypt';\nimport {findToken, generateToken, removeToken, saveToken, validateRefreshToken} from \"./token_service\";\nimport ApiError from \"../exteptions/api_exceptions\";\nimport {addUser, getUserById, getUserByUsername, updateUser} from \"./pdb_service\";\nimport {userTokens} from \"../utills/user_utill\";\n\nexport async function registration(username: string, email: string, password: string, class_id: string) {\n    const candidate = await user_model.findOne({username: username});\n    if(candidate)\n        throw ApiError.badRequest('Пользователь существует');\n\n    const hash = bcrypt.hashSync(password, 5);\n    const user = await user_model.create({username: username, password: hash});\n    const user_pdg = await addUser(user.id, username, email, hash, class_id);\n    return await userTokens(user);\n}\nexport async function login(username: string, password: string) {\n    const user = await user_model.findOne({username});\n    if(!user)\n        throw ApiError.badRequest('Пользователь не существует');\n    const is_equal = bcrypt.compareSync(password, user.password);\n    if(!is_equal)\n        throw ApiError.badRequest('Не верный пароль');\n    return await userTokens(user);\n}\n\nexport async function logout(refresh_token: string) {\n    return await removeToken(refresh_token);\n}\n\nexport async function refresh(refresh_token: string) {\n    if(!refresh_token)\n        throw ApiError.unauthorizedError();\n    const user_data = validateRefreshToken(refresh_token);\n    const token_from_db = await findToken(refresh_token);\n    if(!user_data || !token_from_db)\n        throw ApiError.unauthorizedError();\n    const user = await user_model.findById(token_from_db.user);\n    return await userTokens(user);\n}\n\nexport async function allActiveUsers() {\n    const users = await user_model.find();\n    return users;\n}\n\nexport async function changeUserData(id: string, username: string, password: string, password_d: string, password_old:string, class_id: number) {\n    const user = await getUserById(id);\n    const is_equal = bcrypt.compareSync(password_old, user.password);\n    if(!is_equal)\n        throw ApiError.badRequest('Не верный пароль');\n    const hash = bcrypt.hashSync(password, 5);\n    const user_pdb = await updateUser(id, username, hash, class_id);\n    const user_mdb = await user_model.findById(id);\n    user_mdb.username = username;\n    user_mdb.password = hash;\n    await user_mdb.save();\n    return await userTokens(user_mdb);\n}"]}