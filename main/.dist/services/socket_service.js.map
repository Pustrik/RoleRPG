{"version":3,"file":"socket_service.js","sourceRoot":"","sources":["../../services/socket_service.ts"],"names":[],"mappings":";;;AAAA,yDAAoD;AACpD,qDAA+C;AAE/C,2DAA2C;AAE3C,SAAgB,WAAW,CAAC,IAAY,EAAE,KAAe,EAAE,OAAgB;IACvE,OAAO,CAAC,IAAI,CAAC,kBAAkB,GAAG,IAAI,GAAG,KAAK,EAAE,KAAK,CAAC,CAAC;IACvD,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,kBAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,kBAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC5F,CAAC;AAHD,kCAGC;AAAA,CAAC;AAEK,KAAK,UAAU,cAAc;IAChC,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,2BAAY,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;QACzE,OAAO,IAAA,wBAAU,EAAC,MAAM,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,GAAE,OAAO,GAAG,CAAC,SAAS,CAAA,CAAA,CAAC,CAAC,CAAC;AAC7C,CAAC;AAJD,wCAIC;AAEM,KAAK,UAAU,aAAa;IAC/B,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,2BAAY,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;QAC3D,OAAO,IAAA,wBAAU,EAAC,MAAM,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;AACP,CAAC;AAJD,sCAIC;AAED,SAAgB,oBAAoB,CAAC,OAAkB,EAAE,MAAc;IACnE,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;QACvB,IAAG,GAAG,CAAC,SAAS,KAAK,MAAM;YACvB,OAAO,GAAG,CAAC,SAAS,CAAC;IAC7B,CAAC,CAAC,CAAC;AACP,CAAC;AALD,oDAKC","sourcesContent":["import {player_model} from \"../models/player_model\";\nimport {playersDto} from \"../dtos/player_dtos\";\nimport {IPlayer} from \"../client/src/store/store_socket\";\nimport {io} from \"../socket/socket_server\";\n\nexport function sendMessage(name: string, users: string[], payload?: Object) {\n    console.info('Emitting event: ' + name + ' to', users);\n    users.forEach((id) => (payload ? io.to(id).emit(name, payload) : io.to(id).emit(name)));\n};\n\nexport async function getAllSocketID(): Promise<string[]> {\n    return Object.values(Object.values(await player_model.find()).map((player) => {\n        return playersDto(player);\n    })).map((val) => {return val.socket_id});\n}\n\nexport async function getAllPlayers(): Promise<IPlayer[]> {\n    return Object.values(await player_model.find()).map((player) => {\n        return playersDto(player);\n    });\n}\n\nexport function getSocketsButCurrent(players: IPlayer[], socket: string): string[] {\n    return players.map((val) => {\n        if(val.socket_id !== socket)\n            return val.socket_id;\n    });\n}"]}