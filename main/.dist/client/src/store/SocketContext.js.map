{"version":3,"file":"SocketContext.js","sourceRoot":"","sources":["../../../../client/src/store/SocketContext.ts"],"names":[],"mappings":";;;AAAA,iCAAoC;AAkBvB,QAAA,yBAAyB,GAAwB;IAC1D,MAAM,EAAE,SAAS;IACjB,GAAG,EAAE,EAAE;IACP,MAAM,EAAE,EAAa;IACrB,KAAK,EAAE,EAAE;IACT,OAAO,EAAE,EAAE;CACd,CAAC;AAUK,MAAM,aAAa,GAAG,CAAC,KAA0B,EAAE,MAA6B,EAAE,EAAE;IACvF,OAAO,CAAC,GAAG,CAAC,6BAA6B,GAAG,MAAM,CAAC,IAAI,GAAG,cAAc,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IAE1F,QAAQ,MAAM,CAAC,IAAI,EAAE;QACjB,KAAK,eAAe;YAChB,uCAAY,KAAK,KAAE,MAAM,EAAE,MAAM,CAAC,OAAiB,IAAG;QAC1D,KAAK,YAAY;YACb,uCAAY,KAAK,KAAE,GAAG,EAAE,MAAM,CAAC,OAAiB,IAAG;QACvD,KAAK,gBAAgB;YACjB,uCAAY,KAAK,KAAE,OAAO,EAAE,MAAM,CAAC,OAAoB,IAAG;QAC9D,KAAK,cAAc;YACf,uCAAY,KAAK,KAAE,KAAK,EAAE,MAAM,CAAC,OAAmB,IAAG;QAC3D,KAAK,aAAa;YACd,uCAAY,KAAK,KAAE,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAM,MAAM,CAAC,OAAkB,CAAC,IAAG;QAChG,KAAK,eAAe;YAChB,uCAAY,KAAK,KAAE,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,KAAM,MAAM,CAAC,OAAkB,CAAC,IAAG;QAC9G;YACI,OAAO,KAAK,CAAC;KACpB;AACL,CAAC,CAAC;AAnBW,QAAA,aAAa,iBAmBxB;AAOF,MAAM,aAAa,GAAG,IAAA,qBAAa,EAAsB;IACrD,WAAW,EAAE,iCAAyB;IACtC,cAAc,EAAE,GAAG,EAAE,GAAE,CAAC;CAC3B,CAAC,CAAC;AAEU,QAAA,qBAAqB,GAAG,aAAa,CAAC,QAAQ,CAAC;AAC/C,QAAA,qBAAqB,GAAG,aAAa,CAAC,QAAQ,CAAC;AAE5D,kBAAe,aAAa,CAAC","sourcesContent":["import {createContext} from 'react';\nimport { Socket } from 'socket.io-client';\nimport {storeAnnotation} from \"mobx/dist/api/decorators\";\n\nexport interface IPlayer {\n    socket_id: string,\n    username: string,\n    hp: number,\n    statuses: Array<Number>\n}\nexport interface ISocketContextState {\n    socket: Socket | undefined;\n    uid: string;\n    player: IPlayer,\n    users: string[];\n    players: IPlayer[];\n}\n\nexport const defaultSocketContextState: ISocketContextState = {\n    socket: undefined,\n    uid: '',\n    player: {} as IPlayer,\n    users: [],\n    players: []\n};\n\nexport type TSocketContextActions = 'update_socket' | 'update_uid' | 'update_users' | 'remove_user' | 'update_players' | 'remove_player';\nexport type TSocketContextPayload = string | string[] | Socket | IPlayer[] | IPlayer;\n\nexport interface ISocketContextActions {\n    type: TSocketContextActions;\n    payload: TSocketContextPayload;\n}\n\nexport const SocketReducer = (state: ISocketContextState, action: ISocketContextActions) => {\n    console.log('Message received - Action: ' + action.type + ' - Payload: ', action.payload);\n\n    switch (action.type) {\n        case 'update_socket':\n            return { ...state, socket: action.payload as Socket };\n        case 'update_uid':\n            return { ...state, uid: action.payload as string };\n        case 'update_players':\n            return { ...state, players: action.payload as IPlayer[] };\n        case 'update_users':\n            return { ...state, users: action.payload as string[] };\n        case 'remove_user':\n            return { ...state, users: state.users.filter((uid) => uid !== (action.payload as string)) };\n        case 'remove_player':\n            return { ...state, players: state.players.filter((uid) => uid.socket_id !== (action.payload as string)) };\n        default:\n            return state;\n    }\n};\n\nexport interface ISocketContextProps {\n    SocketState: ISocketContextState;\n    SocketDispatch: React.Dispatch<ISocketContextActions>;\n}\n\nconst SocketContext = createContext<ISocketContextProps>({\n    SocketState: defaultSocketContextState,\n    SocketDispatch: () => {}\n});\n\nexport const SocketContextConsumer = SocketContext.Consumer;\nexport const SocketContextProvider = SocketContext.Provider;\n\nexport default SocketContext;"]}