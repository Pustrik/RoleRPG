{"version":3,"file":"auth.js","sourceRoot":"","sources":["../../controllers/auth.ts"],"names":[],"mappings":"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","sourcesContent":["import {Result, ValidationError, validationResult} from \"express-validator\";\nimport ApiError from \"../exteptions/api_exceptions\";\nimport {login, registration, logout, refresh, allActiveUsers} from \"../services/user_service\"\nexport async function loginPost(req, res, next) {\n    try {\n        const {username, password} = req.body;\n        const user_data = await login(username, password);\n        res.cookie('refresh_token', user_data.refresh_token, {maxAge: 60*60*100, httpOnly: true});\n        return res.status(200).json(user_data);\n    } catch (e) {\n        next(e);\n    }\n}\n\nexport async function registrationPost(req, res, next) {\n    try {\n        const errors: Result<ValidationError> = validationResult(req);\n        if(!errors.isEmpty())\n            return next(ApiError.badRequest('Ошибка валидации', errors.array()));\n        const {username, email, password, class_id} = req.body;\n        const user_data = await registration(username, email, password, class_id);\n        res.cookie('refresh_token', user_data.refresh_token, {maxAge: 30*24*60*60*1000, httpOnly: true});\n        return res.status(200).json(user_data);\n    } catch (e) {\n        next(e);\n    }\n}\n\nexport async function logoutPost(req, res, next) {\n    try {\n        const {refresh_token} = req.cookies;\n        const token = await logout(refresh_token);\n        res.clearCookie('refresh_token');\n        return res.json(token);\n    } catch (e) {\n        next(e);\n    }\n}\n\nexport async function refreshGet(req, res, next) {\n    try {\n        const refresh_token: string = req.cookies.refresh_token;\n        const user_data = await refresh(refresh_token);\n        res.cookie('refresh_token', user_data.refresh_token, {maxAge: 30*24*60*60*1000, httpOnly: true});\n        return res.json(user_data);\n    } catch (e) {\n        next(e);\n    }\n}\n\nexport async function allUsersGet(req, res, next) {\n    try {\n        const users = await allActiveUsers();\n        return res.json(users);\n    } catch (e) {\n        next(e);\n    }\n}"]}